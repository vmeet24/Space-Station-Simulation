//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DSN_UI.ServiceReference2 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/LaunchVehicle")]
    [System.SerializableAttribute()]
    public partial class ServiceFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LaunchVehicleDto", Namespace="http://schemas.datacontract.org/2004/07/LaunchVehicle.Model")]
    [System.SerializableAttribute()]
    public partial class LaunchVehicleDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeployedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrbitInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PayLoadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShouldDeployField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowTelemetryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeployed {
            get {
                return this.IsDeployedField;
            }
            set {
                if ((this.IsDeployedField.Equals(value) != true)) {
                    this.IsDeployedField = value;
                    this.RaisePropertyChanged("IsDeployed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrbitInfo {
            get {
                return this.OrbitInfoField;
            }
            set {
                if ((this.OrbitInfoField.Equals(value) != true)) {
                    this.OrbitInfoField = value;
                    this.RaisePropertyChanged("OrbitInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PayLoad {
            get {
                return this.PayLoadField;
            }
            set {
                if ((object.ReferenceEquals(this.PayLoadField, value) != true)) {
                    this.PayLoadField = value;
                    this.RaisePropertyChanged("PayLoad");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShouldDeploy {
            get {
                return this.ShouldDeployField;
            }
            set {
                if ((this.ShouldDeployField.Equals(value) != true)) {
                    this.ShouldDeployField = value;
                    this.RaisePropertyChanged("ShouldDeploy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowTelemetry {
            get {
                return this.ShowTelemetryField;
            }
            set {
                if ((this.ShowTelemetryField.Equals(value) != true)) {
                    this.ShowTelemetryField = value;
                    this.RaisePropertyChanged("ShowTelemetry");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TelemetryDto", Namespace="http://schemas.datacontract.org/2004/07/LaunchVehicle.Dto")]
    [System.SerializableAttribute()]
    public partial class TelemetryDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeToOrbitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeToOrbit {
            get {
                return this.TimeToOrbitField;
            }
            set {
                if ((this.TimeToOrbitField.Equals(value) != true)) {
                    this.TimeToOrbitField = value;
                    this.RaisePropertyChanged("TimeToOrbit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.ILaunchVehicleService", CallbackContract=typeof(DSN_UI.ServiceReference2.ILaunchVehicleServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ILaunchVehicleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaunchVehicleService/AddVehicle", ReplyAction="http://tempuri.org/ILaunchVehicleService/AddVehicleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DSN_UI.ServiceReference2.ServiceFault), Action="http://tempuri.org/ILaunchVehicleService/AddVehicleServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/LaunchVehicle")]
        void AddVehicle(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaunchVehicleService/AddVehicle", ReplyAction="http://tempuri.org/ILaunchVehicleService/AddVehicleResponse")]
        System.Threading.Tasks.Task AddVehicleAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaunchVehicleService/StartVehicle", ReplyAction="http://tempuri.org/ILaunchVehicleService/StartVehicleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DSN_UI.ServiceReference2.ServiceFault), Action="http://tempuri.org/ILaunchVehicleService/StartVehicleServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/LaunchVehicle")]
        void StartVehicle(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaunchVehicleService/StartVehicle", ReplyAction="http://tempuri.org/ILaunchVehicleService/StartVehicleResponse")]
        System.Threading.Tasks.Task StartVehicleAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaunchVehicleService/SendTelemetryRequest", ReplyAction="http://tempuri.org/ILaunchVehicleService/SendTelemetryRequestResponse")]
        void SendTelemetryRequest(string name, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaunchVehicleService/SendTelemetryRequest", ReplyAction="http://tempuri.org/ILaunchVehicleService/SendTelemetryRequestResponse")]
        System.Threading.Tasks.Task SendTelemetryRequestAsync(string name, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaunchVehicleService/GetVehicles", ReplyAction="http://tempuri.org/ILaunchVehicleService/GetVehiclesResponse")]
        DSN_UI.ServiceReference2.LaunchVehicleDto[] GetVehicles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaunchVehicleService/GetVehicles", ReplyAction="http://tempuri.org/ILaunchVehicleService/GetVehiclesResponse")]
        System.Threading.Tasks.Task<DSN_UI.ServiceReference2.LaunchVehicleDto[]> GetVehiclesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaunchVehicleService/DeployPayload", ReplyAction="http://tempuri.org/ILaunchVehicleService/DeployPayloadResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DSN_UI.ServiceReference2.ServiceFault), Action="http://tempuri.org/ILaunchVehicleService/DeployPayloadServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/LaunchVehicle")]
        void DeployPayload(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaunchVehicleService/DeployPayload", ReplyAction="http://tempuri.org/ILaunchVehicleService/DeployPayloadResponse")]
        System.Threading.Tasks.Task DeployPayloadAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaunchVehicleService/DeorbitLaunchVehicle", ReplyAction="http://tempuri.org/ILaunchVehicleService/DeorbitLaunchVehicleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DSN_UI.ServiceReference2.ServiceFault), Action="http://tempuri.org/ILaunchVehicleService/DeorbitLaunchVehicleServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/LaunchVehicle")]
        void DeorbitLaunchVehicle(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaunchVehicleService/DeorbitLaunchVehicle", ReplyAction="http://tempuri.org/ILaunchVehicleService/DeorbitLaunchVehicleResponse")]
        System.Threading.Tasks.Task DeorbitLaunchVehicleAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILaunchVehicleServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILaunchVehicleService/NotifyTelemetryData")]
        void NotifyTelemetryData(DSN_UI.ServiceReference2.TelemetryDto telemetry);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILaunchVehicleService/NotifyDeployStatus")]
        void NotifyDeployStatus(string name, bool status);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILaunchVehicleServiceChannel : DSN_UI.ServiceReference2.ILaunchVehicleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LaunchVehicleServiceClient : System.ServiceModel.DuplexClientBase<DSN_UI.ServiceReference2.ILaunchVehicleService>, DSN_UI.ServiceReference2.ILaunchVehicleService {
        
        public LaunchVehicleServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LaunchVehicleServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LaunchVehicleServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LaunchVehicleServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LaunchVehicleServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddVehicle(string path) {
            base.Channel.AddVehicle(path);
        }
        
        public System.Threading.Tasks.Task AddVehicleAsync(string path) {
            return base.Channel.AddVehicleAsync(path);
        }
        
        public void StartVehicle(string name) {
            base.Channel.StartVehicle(name);
        }
        
        public System.Threading.Tasks.Task StartVehicleAsync(string name) {
            return base.Channel.StartVehicleAsync(name);
        }
        
        public void SendTelemetryRequest(string name, bool status) {
            base.Channel.SendTelemetryRequest(name, status);
        }
        
        public System.Threading.Tasks.Task SendTelemetryRequestAsync(string name, bool status) {
            return base.Channel.SendTelemetryRequestAsync(name, status);
        }
        
        public DSN_UI.ServiceReference2.LaunchVehicleDto[] GetVehicles() {
            return base.Channel.GetVehicles();
        }
        
        public System.Threading.Tasks.Task<DSN_UI.ServiceReference2.LaunchVehicleDto[]> GetVehiclesAsync() {
            return base.Channel.GetVehiclesAsync();
        }
        
        public void DeployPayload(string name) {
            base.Channel.DeployPayload(name);
        }
        
        public System.Threading.Tasks.Task DeployPayloadAsync(string name) {
            return base.Channel.DeployPayloadAsync(name);
        }
        
        public void DeorbitLaunchVehicle(string name) {
            base.Channel.DeorbitLaunchVehicle(name);
        }
        
        public System.Threading.Tasks.Task DeorbitLaunchVehicleAsync(string name) {
            return base.Channel.DeorbitLaunchVehicleAsync(name);
        }
    }
}
