//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LaunchVehicle.Payload {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Payload")]
    [System.SerializableAttribute()]
    public partial class ServiceFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PayloadDto", Namespace="http://schemas.datacontract.org/2004/07/Payload.Dto")]
    [System.SerializableAttribute()]
    public partial class PayloadDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowTelemetryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LaunchVehicle.Payload.PayloadType payloadTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowData {
            get {
                return this.ShowDataField;
            }
            set {
                if ((this.ShowDataField.Equals(value) != true)) {
                    this.ShowDataField = value;
                    this.RaisePropertyChanged("ShowData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowTelemetry {
            get {
                return this.ShowTelemetryField;
            }
            set {
                if ((this.ShowTelemetryField.Equals(value) != true)) {
                    this.ShowTelemetryField = value;
                    this.RaisePropertyChanged("ShowTelemetry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LaunchVehicle.Payload.PayloadType payloadType {
            get {
                return this.payloadTypeField;
            }
            set {
                if ((this.payloadTypeField.Equals(value) != true)) {
                    this.payloadTypeField = value;
                    this.RaisePropertyChanged("payloadType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PayloadType", Namespace="http://schemas.datacontract.org/2004/07/Payload.Enum")]
    public enum PayloadType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scientific = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Communication = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Spy = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TelemetryDto", Namespace="http://schemas.datacontract.org/2004/07/Payload.Dto")]
    [System.SerializableAttribute()]
    public partial class TelemetryDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeToOrbitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeToOrbit {
            get {
                return this.TimeToOrbitField;
            }
            set {
                if ((this.TimeToOrbitField.Equals(value) != true)) {
                    this.TimeToOrbitField = value;
                    this.RaisePropertyChanged("TimeToOrbit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Payload.IPayloadService", CallbackContract=typeof(LaunchVehicle.Payload.IPayloadServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IPayloadService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/SendTelemetryRequest", ReplyAction="http://tempuri.org/IPayloadService/SendTelemetryRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LaunchVehicle.Payload.ServiceFault), Action="http://tempuri.org/IPayloadService/SendTelemetryRequestServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Payload")]
        void SendTelemetryRequest(string name, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/SendTelemetryRequest", ReplyAction="http://tempuri.org/IPayloadService/SendTelemetryRequestResponse")]
        System.Threading.Tasks.Task SendTelemetryRequestAsync(string name, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/GetPayloads", ReplyAction="http://tempuri.org/IPayloadService/GetPayloadsResponse")]
        LaunchVehicle.Payload.PayloadDto[] GetPayloads();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/GetPayloads", ReplyAction="http://tempuri.org/IPayloadService/GetPayloadsResponse")]
        System.Threading.Tasks.Task<LaunchVehicle.Payload.PayloadDto[]> GetPayloadsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/DecommissionPayload", ReplyAction="http://tempuri.org/IPayloadService/DecommissionPayloadResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LaunchVehicle.Payload.ServiceFault), Action="http://tempuri.org/IPayloadService/DecommissionPayloadServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Payload")]
        void DecommissionPayload(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/DecommissionPayload", ReplyAction="http://tempuri.org/IPayloadService/DecommissionPayloadResponse")]
        System.Threading.Tasks.Task DecommissionPayloadAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/SendDataRequest", ReplyAction="http://tempuri.org/IPayloadService/SendDataRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LaunchVehicle.Payload.ServiceFault), Action="http://tempuri.org/IPayloadService/SendDataRequestServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Payload")]
        void SendDataRequest(string name, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/SendDataRequest", ReplyAction="http://tempuri.org/IPayloadService/SendDataRequestResponse")]
        System.Threading.Tasks.Task SendDataRequestAsync(string name, bool status);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPayloadServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/NotifyPayloadTelemetryData")]
        void NotifyPayloadTelemetryData(LaunchVehicle.Payload.TelemetryDto telemetry);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/NotifyData")]
        void NotifyData(string data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/NotifyImage")]
        void NotifyImage(System.IO.Stream data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPayloadServiceChannel : LaunchVehicle.Payload.IPayloadService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PayloadServiceClient : System.ServiceModel.DuplexClientBase<LaunchVehicle.Payload.IPayloadService>, LaunchVehicle.Payload.IPayloadService {
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendTelemetryRequest(string name, bool status) {
            base.Channel.SendTelemetryRequest(name, status);
        }
        
        public System.Threading.Tasks.Task SendTelemetryRequestAsync(string name, bool status) {
            return base.Channel.SendTelemetryRequestAsync(name, status);
        }
        
        public LaunchVehicle.Payload.PayloadDto[] GetPayloads() {
            return base.Channel.GetPayloads();
        }
        
        public System.Threading.Tasks.Task<LaunchVehicle.Payload.PayloadDto[]> GetPayloadsAsync() {
            return base.Channel.GetPayloadsAsync();
        }
        
        public void DecommissionPayload(string name) {
            base.Channel.DecommissionPayload(name);
        }
        
        public System.Threading.Tasks.Task DecommissionPayloadAsync(string name) {
            return base.Channel.DecommissionPayloadAsync(name);
        }
        
        public void SendDataRequest(string name, bool status) {
            base.Channel.SendDataRequest(name, status);
        }
        
        public System.Threading.Tasks.Task SendDataRequestAsync(string name, bool status) {
            return base.Channel.SendDataRequestAsync(name, status);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Payload.IPayloadStartService")]
    public interface IPayloadStartService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadStartService/StartPayload", ReplyAction="http://tempuri.org/IPayloadStartService/StartPayloadResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LaunchVehicle.Payload.ServiceFault), Action="http://tempuri.org/IPayloadStartService/StartPayloadServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Payload")]
        void StartPayload(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadStartService/StartPayload", ReplyAction="http://tempuri.org/IPayloadStartService/StartPayloadResponse")]
        System.Threading.Tasks.Task StartPayloadAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPayloadStartServiceChannel : LaunchVehicle.Payload.IPayloadStartService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PayloadStartServiceClient : System.ServiceModel.ClientBase<LaunchVehicle.Payload.IPayloadStartService>, LaunchVehicle.Payload.IPayloadStartService {
        
        public PayloadStartServiceClient() {
        }
        
        public PayloadStartServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PayloadStartServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PayloadStartServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PayloadStartServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void StartPayload(string name) {
            base.Channel.StartPayload(name);
        }
        
        public System.Threading.Tasks.Task StartPayloadAsync(string name) {
            return base.Channel.StartPayloadAsync(name);
        }
    }
}
