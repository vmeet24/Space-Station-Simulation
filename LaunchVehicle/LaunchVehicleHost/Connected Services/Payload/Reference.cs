//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LaunchVehicleHost.Payload {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Payload.IPayloadService", CallbackContract=typeof(LaunchVehicleHost.Payload.IPayloadServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IPayloadService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/SendTelemetryRequest", ReplyAction="http://tempuri.org/IPayloadService/SendTelemetryRequestResponse")]
        void SendTelemetryRequest(string name, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/SendTelemetryRequest", ReplyAction="http://tempuri.org/IPayloadService/SendTelemetryRequestResponse")]
        System.Threading.Tasks.Task SendTelemetryRequestAsync(string name, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/GetPayloads", ReplyAction="http://tempuri.org/IPayloadService/GetPayloadsResponse")]
        LaunchVehicle.Payload.PayloadDto[] GetPayloads();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/GetPayloads", ReplyAction="http://tempuri.org/IPayloadService/GetPayloadsResponse")]
        System.Threading.Tasks.Task<LaunchVehicle.Payload.PayloadDto[]> GetPayloadsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/DecommissionPayload", ReplyAction="http://tempuri.org/IPayloadService/DecommissionPayloadResponse")]
        bool DecommissionPayload(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/DecommissionPayload", ReplyAction="http://tempuri.org/IPayloadService/DecommissionPayloadResponse")]
        System.Threading.Tasks.Task<bool> DecommissionPayloadAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/StartDataRequest", ReplyAction="http://tempuri.org/IPayloadService/StartDataRequestResponse")]
        bool StartDataRequest(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/StartDataRequest", ReplyAction="http://tempuri.org/IPayloadService/StartDataRequestResponse")]
        System.Threading.Tasks.Task<bool> StartDataRequestAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/StopDataRequest", ReplyAction="http://tempuri.org/IPayloadService/StopDataRequestResponse")]
        void StopDataRequest(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadService/StopDataRequest", ReplyAction="http://tempuri.org/IPayloadService/StopDataRequestResponse")]
        System.Threading.Tasks.Task StopDataRequestAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPayloadServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/NotifyPayloadTelemetryData")]
        void NotifyPayloadTelemetryData(LaunchVehicle.Payload.TelemetryDto telemetry);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/NotifyData")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LaunchVehicle.Payload.PayloadDto[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LaunchVehicle.Payload.PayloadDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LaunchVehicle.Payload.TelemetryDto))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LaunchVehicle.Payload.PayloadType))]
        void NotifyData(object data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPayloadServiceChannel : LaunchVehicleHost.Payload.IPayloadService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PayloadServiceClient : System.ServiceModel.DuplexClientBase<LaunchVehicleHost.Payload.IPayloadService>, LaunchVehicleHost.Payload.IPayloadService {
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendTelemetryRequest(string name, bool status) {
            base.Channel.SendTelemetryRequest(name, status);
        }
        
        public System.Threading.Tasks.Task SendTelemetryRequestAsync(string name, bool status) {
            return base.Channel.SendTelemetryRequestAsync(name, status);
        }
        
        public LaunchVehicle.Payload.PayloadDto[] GetPayloads() {
            return base.Channel.GetPayloads();
        }
        
        public System.Threading.Tasks.Task<LaunchVehicle.Payload.PayloadDto[]> GetPayloadsAsync() {
            return base.Channel.GetPayloadsAsync();
        }
        
        public bool DecommissionPayload(string name) {
            return base.Channel.DecommissionPayload(name);
        }
        
        public System.Threading.Tasks.Task<bool> DecommissionPayloadAsync(string name) {
            return base.Channel.DecommissionPayloadAsync(name);
        }
        
        public bool StartDataRequest(string name) {
            return base.Channel.StartDataRequest(name);
        }
        
        public System.Threading.Tasks.Task<bool> StartDataRequestAsync(string name) {
            return base.Channel.StartDataRequestAsync(name);
        }
        
        public void StopDataRequest(string name) {
            base.Channel.StopDataRequest(name);
        }
        
        public System.Threading.Tasks.Task StopDataRequestAsync(string name) {
            return base.Channel.StopDataRequestAsync(name);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Payload.IPayloadStartService")]
    public interface IPayloadStartService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadStartService/StartPayload", ReplyAction="http://tempuri.org/IPayloadStartService/StartPayloadResponse")]
        void StartPayload(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayloadStartService/StartPayload", ReplyAction="http://tempuri.org/IPayloadStartService/StartPayloadResponse")]
        System.Threading.Tasks.Task StartPayloadAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPayloadStartServiceChannel : LaunchVehicleHost.Payload.IPayloadStartService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PayloadStartServiceClient : System.ServiceModel.ClientBase<LaunchVehicleHost.Payload.IPayloadStartService>, LaunchVehicleHost.Payload.IPayloadStartService {
        
        public PayloadStartServiceClient() {
        }
        
        public PayloadStartServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PayloadStartServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PayloadStartServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PayloadStartServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void StartPayload(string name) {
            base.Channel.StartPayload(name);
        }
        
        public System.Threading.Tasks.Task StartPayloadAsync(string name) {
            return base.Channel.StartPayloadAsync(name);
        }
    }
}
